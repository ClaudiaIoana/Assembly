     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;a-byte; b-word; c-doubleword; x-qword
    15                                      ; AL -BYTE, AX - WORD, EAX - DW, EDX:EAX - QW
    16 00000000 66                          a db 102
    17 00000001 E205                        b dw 1506
    18 00000003 80841E00                    c dd 2000000
    19 00000007 FF5DD03201000000            x dq 5147483647
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                          ;;x+(2-a*b)/(a*3)-a+c;
    26                                          
    27                                          ; a*b
    28 00000000 A0[00000000]                    mov AL, byte[a]
    29 00000005 6698                            cbw
    30 00000007 66F72D[01000000]                imul word[b]; DX:AX stores a*b
    31                                          
    32 0000000E 6652                            push DX
    33 00000010 6650                            push AX
    34 00000012 59                              pop ECX
    35                                          
    36 00000013 BB02000000                      mov EBX, 2
    37 00000018 29CB                            sub EBX, ECX
    38                                          ;EBX = 2-a*b
    39                                   
    40                                          ;a*3
    41 0000001A B003                            mov AL, 3
    42 0000001C F62D[00000000]                  imul byte[a]
    43 00000022 6689C1                          mov CX, AX
    44                                          
    45 00000025 53                              push EBX
    46 00000026 6658                            pop AX
    47 00000028 665A                            pop DX
    48                                          
    49 0000002A 66F7F9                          idiv CX
    50                                          ;AX = (2-a*b)/(a*3)
    51                                          ;DX = (2-a*b)%(a*3)
    52                                          
    53 0000002D 8B1D[07000000]                  mov EBX, [x+0]
    54 00000033 8B0D[0B000000]                  mov ECX, [x+4]
    55                                          
    56                                          ;from here it will take the unsigned result
    57 00000039 F8                              clc
    58 0000003A 98                              cwde
    59 0000003B 01C3                            add EBX, EAX
    60 0000003D 83D100                          adc ECX, 0
    61                                          
    62 00000040 A0[00000000]                    mov AL, byte[a]
    63 00000045 6698                            cbw
    64 00000047 98                              cwde
    65                                          
    66 00000048 F8                              clc
    67 00000049 29C3                            sub EBX, EAX
    68 0000004B 83D900                          sbb ECX, 0
    69                                          
    70 0000004E F8                              clc
    71 0000004F A1[03000000]                    mov EAX, [c]
    72 00000054 01C3                            add EBX, EAX
    73 00000056 83D100                          adc ECX, 0
    74                                          
    75                                          
    76                                      
    77                                          ; exit(0)
    78 00000059 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    79 0000005B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
