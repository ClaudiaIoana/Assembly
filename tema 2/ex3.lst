     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;a-byte; b-word; c-doubleword; x-qword
    15                                      ; AL -BYTE, AX - WORD, EAX - DW, EDX:EAX - QW
    16 00000000 66                          a db 102
    17 00000001 E205                        b dw 1506
    18 00000003 80841E00                    c dd 2000000
    19 00000007 FF5DD03201000000            x dq 5147483647
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                          ;x+(2-a*b)/(a*3)-a+c; 
    26                                          
    27                                          ; a*b
    28 00000000 A0[00000000]                    mov AL, byte[a]; move in AL the byte a
    29 00000005 B400                            mov AH, 0; convert AL to AX
    30 00000007 66F725[01000000]                mul word[b]; DX:AX stores a*b
    31                                          
    32 0000000E 6652                            push DX
    33 00000010 6650                            push AX; push the DX:AX on the stack
    34 00000012 59                              pop ECX; pop the ECX register to move the a*b
    35                                          
    36 00000013 BB02000000                      mov EBX, 2
    37 00000018 29CB                            sub EBX, ECX; compute the 2-a*b
    38                                          ;EBX = 2-a*b
    39                                   
    40                                          ;a*3
    41 0000001A B003                            mov AL, 3
    42 0000001C F625[00000000]                  mul byte[a]; AX = AL*a = a*3
    43 00000022 6689C1                          mov CX, AX; CX = a*3
    44                                          
    45 00000025 53                              push EBX; we push EBX on the stack
    46 00000026 6658                            pop AX
    47 00000028 665A                            pop DX; we pop the DX:AX for the division
    48                                          ;DX:AX = EBX
    49                                          
    50 0000002A 66F7F1                          div CX
    51                                          ;AX = (2-a*b)/(a*3)
    52                                          ;DX = (2-a*b)%(a*3)
    53                                          
    54 0000002D B900000000                      mov ECX,0  
    55 00000032 6689C1                          mov CX, AX; we move the contents of the AX in ECX, (2-a*b)/(a*3)
    56 00000035 A1[07000000]                    mov EAX, [x+0]
    57 0000003A 8B15[0B000000]                  mov EDX, [x+4]; EDX:EAX = x
    58                                          
    59                                          ;from here it will take the unsigned result
    60 00000040 01C8                            add EAX, ECX;
    61 00000042 83D200                          adc EDX, 0;x+(2-a*b)/(a*3)
    62                                          
    63 00000045 B900000000                      mov ECX, 0
    64 0000004A 8A0D[00000000]                  mov CL, byte[a]
    65                                          
    66 00000050 29C8                            sub EAX, ECX; x+(2-a*b)/(a*3)-a
    67 00000052 83DA00                          sbb EDX, 0
    68                                          
    69 00000055 8B0D[03000000]                  mov ECX, [c]
    70 0000005B 01C8                            add EAX, ECX;x+(2-a*b)/(a*3)-a+c
    71 0000005D 83D200                          adc EDX, 0
    72                                          
    73                                          ;RESULT : in EDX:EAX = 5149548580
    74                                          ;EDX = 1h
    75                                          ;EAX = 32EFE024h
    76                                          
    77                                          
    78                                          
    79                                          ; exit(0)
    80 00000060 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    81 00000062 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
