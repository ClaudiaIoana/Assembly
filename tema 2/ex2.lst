     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;c-b-(a+a)-b
    15                                      ;a - byte, b - word, c - double word, d - qword - Unsigned representation
    16                                      ; AL -BYTE, AX - WORD, EAX - DW, EDX:EAX - QW
    17 00000000 E8                          a db -24
    18 00000001 C801                        b dw 456
    19 00000003 EF4D0B00                    c dd 740847
    20                                      
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26                                          ;c-b-(a+a)-b
    27                                          
    28                                          ;c-b
    29 00000000 66A1[03000000]                  mov AX, word[c+0]
    30 00000006 668B15[05000000]                mov DX, word[c+2]
    31 0000000D 662B05[01000000]                sub AX, word[b]
    32 00000014 6683DA00                        sbb DX, 0
    33                                          ;result in DX:AX
    34                                          ;AX = 19495
    35                                          ;DX = 11
    36                                          
    37                                          ;a+a
    38 00000018 8A1D[00000000]                  mov BL, byte[a]
    39 0000001E 021D[00000000]                  add BL, byte[a]
    40                                          
    41                                          ;c-b - (a+a)
    42 00000024 28D8                            sub AL, BL
    43 00000026 80DC00                          sbb AH, 0
    44 00000029 6683DA00                        sbb DX, 0
    45                                          
    46                                          ;c-b-(a+a)-b
    47 0000002D 662B05[01000000]                sub AX,word [b]
    48 00000034 6683DA00                        sbb DX, 0
    49                                          ;AX = 18831
    50                                          ;DX = 11
    51                                          
    52                                          
    53                                      
    54                                          ; exit(0)
    55 00000038 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 0000003A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
