     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;a,b,c,d - byte
    15                                      ;bytes are smaller than 255 in the unsigned interpretation
    16                                      ;(a+d-c)-(b+b)
    17 00000000 0C                          a db 12
    18 00000001 04                          b db 4
    19 00000002 07                          c db 7
    20 00000003 0A                          d db 10
    21                                      ; 7
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 A0[00000000]                    mov AL, byte[a] ; AL = a
    28 00000005 0205[03000000]                  add AL, byte[d] ; AL = a + d
    29 0000000B 2A05[02000000]                  sub AL, byte[c] ; AL = a + d - c
    30                                          
    31 00000011 8A1D[01000000]                  mov BL, byte[b] ; BL = b
    32 00000017 021D[01000000]                  add BL, byte[b] ; BL = b + b
    33                                          
    34 0000001D 28D8                            sub AL, BL ; AL = AL + BL = (a + d - c) + (b + b)
    35                                      
    36                                          ; exit(0)
    37 0000001F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 00000021 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
