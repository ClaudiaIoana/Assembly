     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;a,b,c,d = byte     e,f,g,h = word
    15                                      ;a*d*e/(f-5)
    16 00000000 20                          a db 32
    17 00000001 22                          d db 34
    18 00000002 3E05                        e dw 1342
    19 00000004 C801                        f dw 456
    20                                      
    21                                      ;3237 rest 209
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27                                          
    28 00000000 A0[00000000]                    mov AL, byte[a] ; AL = a
    29 00000005 F625[01000000]                  mul byte[d] ; AL * d = AX => AX = a*d
    30                                          
    31 0000000B 66F725[02000000]                mul word[e] ; AX * e = DX:AX => DX:AX = a*d*e
    32                                          
    33 00000012 668B1D[04000000]                mov BX, word[f] ; BX = f
    34 00000019 6683EB05                        sub BX, 5 ; BX = f-5
    35                                          
    36 0000001D 66F7F3                          div BX ; DX:AX / BX => AX = DX:AX  / BX, DX =  DX:AX % BX
    37                                          ;AX = a*d*e/(f-5)
    38                                          ;DX = a*d*e%(f-5)
    39                                      
    40                                          ; exit(0)
    41 00000020 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 00000022 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
